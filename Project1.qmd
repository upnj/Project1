---
title: "Project1"
author: "Upendra Joshi & John Tuong"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# ST: 558, Project 1

### By Upendra Joshi & John Tuong

## Introduction

-   The Public Use Microdata Sample (PUMS) Census API (Application Programming Interface) is a collection of data files from the United States Census Bureau that provides access to data samples of the U.S. population and housing units. More specifically, these PUMS data sets cover the HUD's (U.S. Department of Housing and Urban Development) largest rental assistance programs (Public Housing, Section 8, etc). This data is compiled from responses to the American Community Surveys (ACS). The PUMS is comprised of two files: one for person records and the other for housing unit records. It includes geographic and household information including, but not limited to: family type, household income, race, gender, etc. The PUMS' data sets are valuable sources of information to policymakers and the researchers, as it can give some insight on how to better allocate resources and focus on helping those who need it the most.  
-   By leveraging these data sets, we hope to not only grow our R skills, but to learn a little more about the world around us. We'll be focusing on creating functions to query PUMS' Application Programming Interface (API) and process, manipulate, summarize and display data from the PUMS Census, as well as to potentially investigate interesting data points.

```{r}
#Installed and loaded in the necessary packages to help create functions and manipulate/clean data.
install.packages("tidyverse")
install.packages("httr") 
install.packages("jsonlite") 
install.packages("dplyr")
install.packages("tidycensus")

library(tidyverse)
library(httr)
library(jsonlite)
library(dplyr)
library(tidycensus)
```

-   For the first step, we are going to build a URL in order to interact with the PUMS' API. Building this URL will allow us to gain some insight on what all the PUMS' data may contain. After setting up the URL and making a get rest API call (a request sent to a server asking an API to provide a service/information), we're going to create a nice tibble to get a glimpse of what our base_url contains (take a look below!).

```{r}
base_url <- "https://api.census.gov/data/2022/acs/acs1/pums?"
initial_response <- GET(url = base_url)
initial_parse <- fromJSON(rawToChar(initial_response$content))
initial_info <- as_tibble(initial_parse$data)
initial_info
```

-   For the next step, we'll be creating a function to query the PUMS' API. This query will allow for the collection and preparation of data to analyze. Our function, api_query(), contains the following parameters: year = 2022 is defaulted (it's user defined; you can only choose from years 2010 to 2022), state will populate a random number, APEG/PWGTP are defaulted, and PWGTP will always be returned.

# Do we have to use ALL of the numeric and ALL of the categorical variables?

```{r}
api_query <- function(year = 2022, #Default
                      get = "AGEP,SEX", #Default
                      num_var = c("GASP, GRPIP, JWAP, JWDP, JWMNP"),
                      cat_var = c("FER, HHL, HISPEED, JWTRNS, SCH, SCHL"),
                      get_always = "PWGTP,") {
  if (year > 2022 | year < 2010) {
    print("Invalid year value. Please type in a number between 2010 and 2022")
  }
  main_url <- paste0("https://api.census.gov/data/",year,"/acs/acs1/pums?get=",get_always, get)
  response <- GET(url = main_url) 
  parsed <- fromJSON(rawToChar(response$content))
  data_as_tibble <- as_tibble(parsed)
  data_as_tibble <- data_as_tibble %>% 
    rename(PWGTP = V1,
          AGEP = V2) %>%
    slice(-1) %>%
    mutate(AGEP = as.integer(AGEP),
          PWGTP = as.integer(PWGTP)) # If too many, use across..*
return(data_as_tibble)
}
```

```{r}
api_query(year = 2011, num_var = "GASP")
```

## PART I Obtaining the Data from PUMS API

### API Function

## PART II Summarizing the Data and Plots

### Summary Function

-   In this section we have created 2 functions "Summary" function takes the data from tibble and generate summary statistics (mean and standard deviation) for all numeric variables and counts for all categorical variables from the data frame. This function takes three arguments - class census, numeric variables to generate summary statistics and categorical variables.

### Plot Function

-   
